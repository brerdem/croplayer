import Head from "next/head";
import styles from "../styles/Home.module.css";
import { FileUploader } from "react-drag-drop-files";
import { useCallback, useEffect, useRef, useState } from "react";
import axios from "axios";
import Lottie from "lottie-react";
import loadingAnimation from "../public/loading.json";

export default function Home() {
  const fileTypes = ["JPG", "PNG"];
  const [original, setOriginal] = useState("");
  const [removed, setRemoved] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [secs, setSecs] = useState(0);
  const timerInterval: { current: NodeJS.Timer | number | null } = useRef(null);

  const handleChange = async (file: File) => {
    setSecs(0);
    timerInterval.current = setInterval(() => setSecs((s) => s + 1), 1000);
    const buffer = await file.arrayBuffer();
    var arrayBufferView = new Uint8Array(buffer);
    var blob = new Blob([arrayBufferView], { type: "image/png" });
    const reader = new FileReader();
    reader.readAsDataURL(blob);
    reader.onloadend = function () {
      var base64data = reader.result;
      setOriginal(base64data as string);
    };

    setRemoved(null);
    setLoading(true);
    console.log("object :>> ", file);

    let formData = new FormData();
    formData.set("image", file);
    try {
      const res = await axios({
        method: "post",
        url: "/api/remove",
        data: formData,
        headers: { "Content-Type": "multipart/form-data" },
      });
      setRemoved(res.data.data);
    } catch (error) {
      console.log("error :>> ", error);
    }
    setLoading(false);
    clearInterval(timerInterval.current as NodeJS.Timeout);
  };

  useEffect(() => {
    return () => clearInterval(timerInterval.current as NodeJS.Timeout);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Crop Layer Alternatif Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h2 className={styles.heading}>Crop Layer Alternatif Test</h2>
        <h3>{secs}s</h3>

        <div className={styles.row}>
          <div>
            <h4>Orjinal</h4>
            <div className={styles.card}>
              {original !== "" && (
                <img
                  src={original}
                  width={380}
                  height={380}
                  style={{
                    objectFit: "contain",
                  }}
                />
              )}
            </div>
          </div>

          <div>
            <h4>Arkaplansız</h4>
            <div className={styles.card}>
              {loading && (
                <Lottie
                  animationData={loadingAnimation}
                  style={{
                    width: 200,
                    height: 200,
                  }}
                />
              )}

              {removed && (
                <img
                  width={380}
                  height={380}
                  src={`data:image/png;base64,${removed}`}
                  style={{
                    objectFit: "contain",
                  }}
                />
              )}
            </div>
          </div>
        </div>

        <FileUploader
          label="Buraya tıklayıp fotoğraf seçin ya da sürükleyip bırakın"
          hoverTitle="Buraya sürükleyin"
          handleChange={handleChange}
          name="file"
          types={fileTypes}
          classes={styles.dropZone}
        />
      </main>
    </div>
  );
}
